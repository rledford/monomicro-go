// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/v1/dnd.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DnDServiceClient is the client API for DnDService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DnDServiceClient interface {
	GetRoll(ctx context.Context, in *GetRollRequest, opts ...grpc.CallOption) (*GetRollResponse, error)
}

type dnDServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDnDServiceClient(cc grpc.ClientConnInterface) DnDServiceClient {
	return &dnDServiceClient{cc}
}

func (c *dnDServiceClient) GetRoll(ctx context.Context, in *GetRollRequest, opts ...grpc.CallOption) (*GetRollResponse, error) {
	out := new(GetRollResponse)
	err := c.cc.Invoke(ctx, "/api.v1.DnDService/GetRoll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DnDServiceServer is the server API for DnDService service.
// All implementations should embed UnimplementedDnDServiceServer
// for forward compatibility
type DnDServiceServer interface {
	GetRoll(context.Context, *GetRollRequest) (*GetRollResponse, error)
}

// UnimplementedDnDServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDnDServiceServer struct {
}

func (UnimplementedDnDServiceServer) GetRoll(context.Context, *GetRollRequest) (*GetRollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoll not implemented")
}

// UnsafeDnDServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DnDServiceServer will
// result in compilation errors.
type UnsafeDnDServiceServer interface {
	mustEmbedUnimplementedDnDServiceServer()
}

func RegisterDnDServiceServer(s grpc.ServiceRegistrar, srv DnDServiceServer) {
	s.RegisterService(&DnDService_ServiceDesc, srv)
}

func _DnDService_GetRoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnDServiceServer).GetRoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.DnDService/GetRoll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnDServiceServer).GetRoll(ctx, req.(*GetRollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DnDService_ServiceDesc is the grpc.ServiceDesc for DnDService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DnDService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.DnDService",
	HandlerType: (*DnDServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoll",
			Handler:    _DnDService_GetRoll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/dnd.proto",
}
